package bot

import (
	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
	"log"
	"os"
	"tgbot/database"
	"tgbot/parser"
)

const adminID int64 = 925884466

var awaitingAdminMessage bool
var adminChatID int64

func Bot() {
	err := godotenv.Load("./resources/metadata/token/test_bot_token.env")
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞: ", err)
	}

	botToken := os.Getenv("BOT_TOKEN")
	const dbPath = "./resources/data/users.sqlite"

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: ", err)
	}
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	updates := configureUpdates(bot)
	userDAO := database.NewUserDAO(dbPath)
	defer userDAO.Close()

	users := make(map[int64]*database.User)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		chatID := update.Message.Chat.ID
		user := getOrCreateUser(chatID, userDAO, users)
		log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %s", update.Message.From.UserName, update.Message.Text)

		handleState(bot, update, user, userDAO, users)
	}
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
func configureUpdates(bot *tgbotapi.BotAPI) tgbotapi.UpdatesChannel {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	return bot.GetUpdatesChan(u)
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func getOrCreateUser(chatID int64, userDAO *database.UserDAO, users map[int64]*database.User) *database.User {
	if user, exists := users[chatID]; exists {
		return user
	}

	dbUser, err := userDAO.GetUser(chatID)
	if err == nil && dbUser != nil {
		users[chatID] = dbUser
		return dbUser
	}

	user := &database.User{ID: chatID, State: "hello"}
	if err := userDAO.SaveUser(user); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", err)
	}
	users[chatID] = user
	return user
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
func handleState(bot *tgbotapi.BotAPI, update tgbotapi.Update, user *database.User, userDAO *database.UserDAO, users map[int64]*database.User) {
	chatID := update.Message.Chat.ID
	text := update.Message.Text

	switch user.State {
	case "hello":
		handleHelloState(bot, update, user, userDAO, users)
	case "waiting_for_education":
		handleEducationState(bot, chatID, text, user, userDAO)
	case "waiting_for_course":
		handleCourseState(bot, chatID, text, user)
	case "select_group":
		handleGroupState(bot, chatID, text, user)
	case "select_format":
		handleFormatState(bot, chatID, text, user, userDAO, users)
	case "waiting_for_return":
		handleReturnState(bot, chatID, text, user, userDAO)
	case "teacher":
		handleTeacherState(bot, chatID, text, user)
	case "corpus_info":
		handleCorpusState(bot, chatID, text, user)
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è "hello"
func handleHelloState(bot *tgbotapi.BotAPI, update tgbotapi.Update, user *database.User, userDAO *database.UserDAO, users map[int64]*database.User) {
	chatID := update.Message.Chat.ID
	text := update.Message.Text

	users[chatID] = user
	switch text {
	case "üóì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì":
		if user.EducationLevel == "" {
			sendKeyboardMessage(bot, chatID, "–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è", createEducationKeyboard, user, "waiting_for_education")
		} else {
			sendKeyboardMessage(bot, chatID, "–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å:", createCourseKeyboardUp, user, "waiting_for_course")
		}
	case "üë±‚Äç‚ôÇÔ∏è–ù–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞üë±":
		sendKeyboardMessage(bot, chatID, "–ù–∞–ø–∏—à–∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–ò–≤–∞–Ω–æ–≤)", nil, user, "teacher")
	case "üè¢–ù–∞–π—Ç–∏ –∫–æ—Ä–ø—É—Åüè´":
		sendKeyboardMessage(bot, chatID, "–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∫–æ—Ä–ø—É—Å–∞", createCorpusNum, user, "corpus_info")
	case "/start":
		sendKeyboardMessage(bot, chatID, "–ü—Ä–∏–≤–µ—Ç, –Ø –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ —Ç–µ–±–µ –≤ —Ç–≤–æ–µ–º –æ–±—É—á–µ–Ω–∏–∏!", createHelloKeyboard, user, "")
	case "/send":
		if update.Message.From.ID != adminID {
			sendKeyboardMessage(bot, chatID, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", createHelloKeyboard, user, "")
			return
		}
		awaitingAdminMessage = true
		adminChatID = chatID
		sendKeyboardMessage(bot, chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", createHelloKeyboard, user, "")
	default:
		if awaitingAdminMessage && update.Message.From.ID == adminID && chatID == adminChatID {
			handleAdminMessage(bot, chatID, text, userDAO)
		} else {
			sendKeyboardMessage(bot, chatID, "–ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É", createHelloKeyboard, user, "")
		}
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
func handleAdminMessage(bot *tgbotapi.BotAPI, chatID int64, messageText string, userDAO *database.UserDAO) {
	if messageText == "/cancel" {
		awaitingAdminMessage = false
		sendKeyboardMessage(bot, chatID, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", createHelloKeyboard, nil, "")
		return
	}

	usersList, err := userDAO.GetAllUsers()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %s", err)
		sendKeyboardMessage(bot, chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.", createHelloKeyboard, nil, "")
		awaitingAdminMessage = false
		return
	}

	for _, u := range usersList {
		if _, err := bot.Send(tgbotapi.NewMessage(u.ID, messageText)); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %s", u.ID, err)
		}
	}

	sendKeyboardMessage(bot, chatID, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", createHelloKeyboard, nil, "")
	awaitingAdminMessage = false
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
func handleEducationState(bot *tgbotapi.BotAPI, chatID int64, text string, user *database.User, userDAO *database.UserDAO) {
	user.EducationLevel = text
	switch text {
	case "–í—ã—Å—à–µ–µ":
		sendKeyboardMessage(bot, chatID, "–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å:", createCourseKeyboardUp, user, "waiting_for_course")
	case "–°—Ä–µ–¥–Ω–µ–µ":
		sendKeyboardMessage(bot, chatID, "–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å:", createCourseKeyboardDown, user, "waiting_for_course")
	case "‚¨ÖÔ∏è–ù–∞–∑–∞–¥":
		sendKeyboardMessage(bot, chatID, "–ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞", createHelloKeyboard, user, "hello")
	default:
		sendKeyboardMessage(bot, chatID, "–ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É", createEducationKeyboard, user, "")
		return
	}
	saveUser(user, userDAO, chatID)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
func handleCourseState(bot *tgbotapi.BotAPI, chatID int64, text string, user *database.User) {
	user.Course = text
	switch text {
	case "‚¨ÖÔ∏è–ù–∞–∑–∞–¥":
		sendKeyboardMessage(bot, chatID, "–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑", createHelloKeyboard, user, "hello")
	case "ü§ì 1 –∫—É—Ä—Å", "üòé 2 –∫—É—Ä—Å", "üßê 3 –∫—É—Ä—Å", "üéì 4 –∫—É—Ä—Å", "ü´† 5 –∫—É—Ä—Å":
		sendKeyboardMessage(bot, chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", getGroupKeyboard(user.Course, user.EducationLevel), user, "select_group")
	default:
		keyboard := createCourseKeyboardUp
		if user.EducationLevel == "–°—Ä–µ–¥–Ω–µ–µ" {
			keyboard = createCourseKeyboardDown
		}
		sendKeyboardMessage(bot, chatID, "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–æ—á–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ", keyboard, user, "")
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
func handleGroupState(bot *tgbotapi.BotAPI, chatID int64, text string, user *database.User) {
	user.Group = text
	if text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥" {
		sendKeyboardMessage(bot, chatID, "–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å:", createCourseKeyboardUp, user, "waiting_for_course")
		return
	}

	if user.Format == "" {
		sendKeyboardMessage(bot, chatID, "–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞", createPrintKeyboard, user, "select_format")
	} else {
		schedule := parser.Tab(user.Group, user.Format, user.EducationLevel)
		sendKeyboardMessage(bot, chatID, schedule, createBackKeyboard, user, "waiting_for_return")
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞
func handleFormatState(bot *tgbotapi.BotAPI, chatID int64, text string, user *database.User, userDAO *database.UserDAO, users map[int64]*database.User) {
	if text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥" {
		sendKeyboardMessage(bot, chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", getGroupKeyboard(user.Course, user.EducationLevel), user, "select_group")
		return
	}

	user.Format = text
	schedule := parser.Tab(user.Group, user.Format, user.EducationLevel)
	sendKeyboardMessage(bot, chatID, schedule, createBackKeyboard, user, "waiting_for_return")
	saveUser(user, userDAO, chatID)
	delete(users, chatID)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞
func handleReturnState(bot *tgbotapi.BotAPI, chatID int64, text string, user *database.User, userDAO *database.UserDAO) {
	saveUserStateOnly(user, userDAO, chatID)
	switch text {
	case "üìö –ö—É—Ä—Å":
		sendKeyboardMessage(bot, chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", createCourseKeyboardUp, user, "waiting_for_course")
	case "üè´ –ì—Ä—É–ø–ø–∞":
		sendKeyboardMessage(bot, chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", getGroupKeyboard(user.Course, user.EducationLevel), user, "select_group")
	case "üìã –í—ã–≤–æ–¥":
		sendKeyboardMessage(bot, chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:", createPrintKeyboard, user, "select_format")
	case "üéì–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ":
		sendKeyboardMessage(bot, chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:", createEducationKeyboard, user, "waiting_for_education")
	case "„ÄΩÔ∏è–ù–∞—á–∞–ª–æ":
		sendKeyboardMessage(bot, chatID, "–ß–µ–º –µ—â–µ –ø–æ–º–æ—á—å?", createHelloKeyboard, user, "hello")
	default:
		sendKeyboardMessage(bot, chatID, "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ", createBackKeyboard, user, "")
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
func handleTeacherState(bot *tgbotapi.BotAPI, chatID int64, text string, user *database.User) {
	teacher := parser.FindTeacher(text)
	if teacher == nil || teacher.Picture == "" {
		sendKeyboardMessage(bot, chatID, "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å "+text+" –Ω–µ –Ω–∞–π–¥–µ–Ω", createHelloKeyboard, user, "hello")
		return
	}

	lesson, _ := parser.FindCurrentLessons(teacher.FileName)
	info := teacher.Surname + teacher.Name + teacher.Text + lesson
	handleMediaGroupInfo(bot, chatID, info, teacher.Picture, "")
	sendKeyboardMessage(bot, chatID, "–ß–µ–º –µ—â–µ –ø–æ–º–æ—á—å?", createHelloKeyboard, user, "hello")
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ä–ø—É—Å–µ
func handleCorpusState(bot *tgbotapi.BotAPI, chatID int64, text string, user *database.User) {
	corpusInfo := map[string]struct {
		description string
		mapImg      string
		corpusImg   string
	}{
		"1": {"–≠–æ—Ç –Ω–∞—à –≥–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å\n–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–º —Ç—É—Ç –ø–æ—Å–ª—É–∂–∏—Ç –æ–≥—Ä–æ–º–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞(–∫—É—Ä–∏–ª–∫–∞)\n–ê–¥—Ä–µ—Å: –ó–∏–ø–æ–≤—Å–∫–∞—è, –¥.5", "./resources/images/corpus/1_map.jpg", "./resources/images/corpus/1_corpus.jpg"},
		"2": {"–í—Ç–æ—Ä–æ–π –∫–æ—Ä–ø—É—Å –∏–ª–∏ (–°–±–µ—Ä–±–∞–Ω–∫)\n–ù–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ –∑–∏–ø–æ–≤—Å–∫–æ–π –∏ –º–æ—Å–∫–æ–≤—Å–∫–æ–π. –ê –Ω–∞—à –æ—Ä–∏–µ–Ω—Ç–∏–∏—Ä —ç—Ç–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –∫–ª—É–± Fenix\n–ê–¥—Ä–µ—Å: –ó–∏–ø–æ–≤—Å–∫–∞—è 8", "./resources/images/corpus/2_map.jpg", "./resources/images/corpus/2_corpus.jpg"},
		"3": {"–¢—Ä–µ—Ç–∏–π –∫–æ—Ä–ø—É—Å\n–ù–∞—Ö–æ–¥–∏—Ç—å—Å—è –∑–∞ —Ç—Ä–∞–º–≤–∞–π–Ω—ã–º–∏ –ø—É—Ç—è–º–∏ –ø–æ –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ\n–ê–¥—Ä–µ—Å: –ó–∏–ø–æ–≤—Å–∫–∞—è 12", "./resources/images/corpus/3_map.jpg", "./resources/images/corpus/3_corpus.jpg"},
		"4": {"–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –∫–æ—Ä–ø—É—Å\n–ù–∞—à –æ—Ä–∏–µ–Ω—Ç–∏–∏—Ä —ç—Ç–æ SubWay –∞ —Ç–æ—á–Ω–µ–µ —Å–ª–µ–≤–∞ –æ—Ç –Ω–µ–≥–æ\n–ê–¥—Ä–µ—Å: –ó–∏–ø–æ–≤—Å–∫–∞—è 5/2", "./resources/images/corpus/4_map.jpg", "./resources/images/corpus/4_corpus.jpg"},
		"5": {"–ü—è—Ç—ã–π –∫–æ—Ä–ø—É—Å (—à–∫–æ–ª–∞)\n–ù–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–∏—Å—Ç—Ä–æ–π–∫–µ –±—ã–≤—à–µ–π –≥–∏–º–Ω–∞–∑–∏–∏ –∏–º—Å–∏—Ç. –ù–æ —Ç–æ–ª—å–∫–æ –Ω–µ –ø—É—Ç–∞–π –Ω–∞—à –≤—Ö–æ–¥ —Å —Ç–æ—Ä—Ü–∞ –∞ –Ω–µ –≥–ª–∞–≤–Ω—ã–π\n–ê–¥—Ä–µ—Å: –ó–∏–ø–æ–≤—Å–∫–∞—è 8", "./resources/images/corpus/5_map.jpg", "./resources/images/corpus/5_corpus.jpg"},
		"6": {"–®–µ—Å—Ç–æ–π –∫–æ—Ä–ø—É—Å(–î–∏–∑–∞–π–Ω–µ—Ä—ã)\n–Ω–∞—Ö–æ–¥–∏—å—Ç—Å—è –∑–∞ —É–≥–ª–æ–º –æ—Ç –º—Ñ—Ü –Ω–∞–ø—Ä–æ—Ç–∏–≤ –≤—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å\n–ê–¥—Ä–µ—Å: –ó–∏–ø–æ–≤—Å–∫–∞—è 5–∫1", "./resources/images/corpus/6_map.jpg", "./resources/images/corpus/6_corpus.jpg"},
		"7": {"–°–µ–¥—å–º–æ–π –∫–æ—Ä–ø—É—Å\n–ù–∞—Ö–æ–¥–∏—å—Ç—Å—è —Å—Ä–∞–∑—É –∑–∞ –≥–ª–∞–≤–Ω—ã–º", "./resources/images/corpus/7_map.jpg", "./resources/images/corpus/7_corpus.jpg"},
		"8": {"–í–æ—Å—å–º–æ–π –∫–æ—Ä–ø—É—Å\n–Ω–∞—Ö–æ–¥–∏—Ç—å—Ç—Å—è —Å–ª–µ–≤–∞ –æ—Ç –∫–æ—Ä–ø—É—Å–∞ –ø—è—Ç—å –≤ –∑–¥–∞–Ω–∏–∏ –≥–∏–º–Ω–∞–∑–∏–∏\n–ê–¥—Ä–µ—Å: –ó–∏–ø–æ–≤—Å–∫–∞—è 3", "./resources/images/corpus/8_map.jpg", "./resources/images/corpus/8_corpus.jpg"},
	}

	if info, exists := corpusInfo[text]; exists {
		handleMediaGroupInfo(bot, chatID, info.description, info.mapImg, info.corpusImg)
	} else if text == "„ÄΩÔ∏è–ù–∞—á–∞–ª–æ" {
		sendKeyboardMessage(bot, chatID, "–ß–µ–º –µ—â–µ –ø–æ–º–æ—á—å?", createHelloKeyboard, user, "hello")
	} else {
		sendKeyboardMessage(bot, chatID, "–ù–∞–∂–º–∏ —Ü–∏—Ñ—Ä—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ", createCorpusNum, user, "")
	}
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ)
func saveUser(user *database.User, userDAO *database.UserDAO, chatID int64) {
	if err := userDAO.SaveUser(user); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", chatID, err)
	}
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func saveUserStateOnly(user *database.User, userDAO *database.UserDAO, chatID int64) {
	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–æ–ª—å–∫–æ ID –∏ State –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î
	tempUser := &database.User{
		ID:    chatID,
		State: user.State,
	}
	if err := userDAO.SaveUser(tempUser); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", chatID, err)
	}
}

// –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞
func sendKeyboardMessage(bot *tgbotapi.BotAPI, chatID int64, text string, keyboardFunc func() tgbotapi.ReplyKeyboardMarkup, user *database.User, newState string) {
	msg := tgbotapi.NewMessage(chatID, text)
	if keyboardFunc != nil {
		msg.ReplyMarkup = keyboardFunc()
	}

	_, err := bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}

	if newState != "" {
		user.State = newState
	}
}

var groupKeyboards = map[string]map[string]func() tgbotapi.ReplyKeyboardMarkup{
	"–í—ã—Å—à–µ–µ": {
		"ü§ì 1 –∫—É—Ä—Å": func() tgbotapi.ReplyKeyboardMarkup { return createGroupKeyboardCourseById(1) },
		"üòé 2 –∫—É—Ä—Å": func() tgbotapi.ReplyKeyboardMarkup { return createGroupKeyboardCourseById(2) },
		"üßê 3 –∫—É—Ä—Å": func() tgbotapi.ReplyKeyboardMarkup { return createGroupKeyboardCourseById(3) },
		"üéì 4 –∫—É—Ä—Å": func() tgbotapi.ReplyKeyboardMarkup { return createGroupKeyboardCourseById(4) },
		"ü´† 5 –∫—É—Ä—Å": func() tgbotapi.ReplyKeyboardMarkup { return createGroupKeyboardCourseById(5) },
	},
	"–°—Ä–µ–¥–Ω–µ–µ": {
		"ü§ì 1 –∫—É—Ä—Å": func() tgbotapi.ReplyKeyboardMarkup { return createGroupKeyboardCourseById(7) },
		"üòé 2 –∫—É—Ä—Å": func() tgbotapi.ReplyKeyboardMarkup { return createGroupKeyboardCourseById(8) },
		"üßê 3 –∫—É—Ä—Å": func() tgbotapi.ReplyKeyboardMarkup { return createGroupKeyboardCourseById(9) },
		"üéì 4 –∫—É—Ä—Å": func() tgbotapi.ReplyKeyboardMarkup { return createGroupKeyboardCourseById(10) },
	},
}

func getGroupKeyboard(course, education string) func() tgbotapi.ReplyKeyboardMarkup {
	if eduMap, ok := groupKeyboards[education]; ok {
		if kbFunc, ok := eduMap[course]; ok {
			return kbFunc
		}
	}
	return nil
}

func handleMediaGroupInfo(api *tgbotapi.BotAPI, chatID int64, text, filePath1, filePath2 string) {
	media1 := tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(filePath1))
	media1.Caption = text

	mediaGroup := []interface{}{media1}

	if filePath2 != "" {
		media2 := tgbotapi.NewInputMediaPhoto(tgbotapi.FilePath(filePath2))
		mediaGroup = append(mediaGroup, media2)
	}

	_, err := api.Send(tgbotapi.NewMediaGroup(chatID, mediaGroup))
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: %v", err)
	}
}
