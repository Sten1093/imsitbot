package bot

import (
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"tgbot/parser"
)

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫—É—Ä—Å–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫
const (
	FirstCourse  = "ü§ì 1 –∫—É—Ä—Å"
	SecondCourse = "üòé 2 –∫—É—Ä—Å"
	ThirdCourse  = "üßê 3 –∫—É—Ä—Å"
	FourthCourse = "üéì 4 –∫—É—Ä—Å"
	FifthCourse  = "ü´† 5 –∫—É—Ä—Å"
	BackButton   = "‚¨ÖÔ∏è–ù–∞–∑–∞–¥"
	StartButton  = "„ÄΩÔ∏è–ù–∞—á–∞–ª–æ"
)

// KeyboardConfig –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
type KeyboardConfig struct {
	Buttons       []string
	ButtonsPerRow int
	AddBackButton bool
}

// createKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func createKeyboard(config KeyboardConfig) tgbotapi.ReplyKeyboardMarkup {
	var keyboard [][]tgbotapi.KeyboardButton
	var row []tgbotapi.KeyboardButton

	for _, btn := range config.Buttons {
		row = append(row, tgbotapi.NewKeyboardButton(btn))
		if len(row) == config.ButtonsPerRow {
			keyboard = append(keyboard, row)
			row = []tgbotapi.KeyboardButton{}
		}
	}

	if len(row) > 0 {
		keyboard = append(keyboard, row)
	}

	if config.AddBackButton {
		keyboard = append(keyboard, tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton(BackButton)))
	}

	return tgbotapi.NewReplyKeyboard(keyboard...)
}

// createHelloKeyboard —Å–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
func createHelloKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return createKeyboard(KeyboardConfig{
		Buttons:       []string{"üóì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì", "üë±‚Äç‚ôÇÔ∏è–ù–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞üë±", "üè¢–ù–∞–π—Ç–∏ –∫–æ—Ä–ø—É—Åüè´"},
		ButtonsPerRow: 2,
	})
}

// createBackKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–æ–∑–≤—Ä–∞—Ç–∞
func createBackKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return createKeyboard(KeyboardConfig{
		Buttons:       []string{"üìö –ö—É—Ä—Å", "üè´ –ì—Ä—É–ø–ø–∞", "üìã –í—ã–≤–æ–¥", "üéì–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", StartButton},
		ButtonsPerRow: 3,
	})
}

// createPrintKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞
func createPrintKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return createKeyboard(KeyboardConfig{
		Buttons:       []string{"üåû –î–µ–Ω—å üôã‚Äç‚ôÇÔ∏è", "üìÖ –ù–µ–¥–µ–ª—è"},
		ButtonsPerRow: 2,
		AddBackButton: true,
	})
}

// createCourseKeyboardUp —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫—É—Ä—Å–æ–≤ –¥–ª—è –≤—ã—Å—à–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
func createCourseKeyboardUp() tgbotapi.ReplyKeyboardMarkup {
	return createKeyboard(KeyboardConfig{
		Buttons:       []string{FirstCourse, SecondCourse, ThirdCourse, FourthCourse, FifthCourse},
		ButtonsPerRow: 2,
		AddBackButton: true,
	})
}

// createCourseKeyboardDown —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫—É—Ä—Å–æ–≤ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
func createCourseKeyboardDown() tgbotapi.ReplyKeyboardMarkup {
	return createKeyboard(KeyboardConfig{
		Buttons:       []string{FirstCourse, SecondCourse, ThirdCourse, FourthCourse},
		ButtonsPerRow: 2,
		AddBackButton: true,
	})
}

// createCorpusNum —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–æ–º–µ—Ä–æ–≤ –∫–æ—Ä–ø—É—Å–æ–≤
func createCorpusNum() tgbotapi.ReplyKeyboardMarkup {
	return createKeyboard(KeyboardConfig{
		Buttons:       []string{"1", "2", "3", "4", "5", "6", "7", "8", StartButton},
		ButtonsPerRow: 3,
	})
}

// createGroupKeyboardCourseById —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥—Ä—É–ø–ø –ø–æ ID –∫—É—Ä—Å–∞
func createGroupKeyboardCourseById(id int) tgbotapi.ReplyKeyboardMarkup {
	groups := parser.GetGroups()
	var groupButtons []string

	for _, group := range groups {
		if group.ID == id {
			groupButtons = append(groupButtons, group.TGName)
		}
	}

	return createKeyboard(KeyboardConfig{
		Buttons:       groupButtons,
		ButtonsPerRow: 3,
		AddBackButton: true,
	})
}

// createEducationKeyboard —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
func createEducationKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return createKeyboard(KeyboardConfig{
		Buttons:       []string{"–í—ã—Å—à–µ–µ", "–°—Ä–µ–¥–Ω–µ–µ"},
		ButtonsPerRow: 2,
		AddBackButton: true,
	})
}
